// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using NasokiKoide.DXSuite.Models;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace NasokiKoide.DXSuite.ConsoleWeb.Api.V1.Documents {
    /// <summary>
    /// Builds and executes requests for operations under \ConsoleWeb\api\v1\documents
    /// </summary>
    public class DocumentsRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>
        /// Instantiates a new <see cref="DocumentsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DocumentsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/ConsoleWeb/api/v1/documents{?docsetId*,documentName*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="DocumentsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DocumentsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/ConsoleWeb/api/v1/documents{?docsetId*,documentName*}", rawUrl)
        {
        }
        /// <summary>
        /// ドキュメントを検索します。
        /// </summary>
        /// <returns>A List&lt;GetDocumentsResponse&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="Model__error_response_v1__BadRequestErrorResponse">When receiving a 400 status code</exception>
        /// <exception cref="Model__error_response_v1__BadRequestErrorResponse">When receiving a 401 status code</exception>
        /// <exception cref="Model__error_response_v1__BadRequestErrorResponse">When receiving a 404 status code</exception>
        /// <exception cref="Model__error_response_v1__BadRequestErrorResponse">When receiving a 500 status code</exception>
        /// <exception cref="Model__error_response_v1__ErrorResponse">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<GetDocumentsResponse>?> GetAsync(Action<RequestConfiguration<DocumentsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<GetDocumentsResponse>> GetAsync(Action<RequestConfiguration<DocumentsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                {"400", Model__error_response_v1__BadRequestErrorResponse.CreateFromDiscriminatorValue},
                {"401", Model__error_response_v1__BadRequestErrorResponse.CreateFromDiscriminatorValue},
                {"404", Model__error_response_v1__BadRequestErrorResponse.CreateFromDiscriminatorValue},
                {"500", Model__error_response_v1__BadRequestErrorResponse.CreateFromDiscriminatorValue},
                {"XXX", Model__error_response_v1__ErrorResponse.CreateFromDiscriminatorValue},
            };
            var collectionResult = await RequestAdapter.SendCollectionAsync<GetDocumentsResponse>(requestInfo, GetDocumentsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
            return collectionResult?.ToList();
        }
        /// <summary>
        /// ドキュメントを検索します。
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DocumentsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DocumentsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="DocumentsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public DocumentsRequestBuilder WithUrl(string rawUrl)
        {
            return new DocumentsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// ドキュメントを検索します。
        /// </summary>
        public class DocumentsRequestBuilderGetQueryParameters 
        {
            /// <summary>複数をカンマ区切りで指定可能</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("docsetId")]
            public string? DocsetId { get; set; }
#nullable restore
#else
            [QueryParameter("docsetId")]
            public string DocsetId { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("documentName")]
            public string? DocumentName { get; set; }
#nullable restore
#else
            [QueryParameter("documentName")]
            public string DocumentName { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class DocumentsRequestBuilderGetRequestConfiguration : RequestConfiguration<DocumentsRequestBuilderGetQueryParameters> 
        {
        }
    }
}
