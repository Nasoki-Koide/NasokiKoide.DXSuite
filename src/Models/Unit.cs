// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace NasokiKoide.DXSuite.Models {
    #pragma warning disable CS1591
    public class Unit : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The createdAt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>0: データ化中、またはデータチェック未完了、またはコンペア未完了、または, 100: CSV未ダウンロード, 400: CSVダウンロード完了</summary>
        public int? CsvDownloadStatus { get; set; }
        /// <summary>The csvFileName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CsvFileName { get; set; }
#nullable restore
#else
        public string CsvFileName { get; set; }
#endif
        /// <summary>0: データチェック設定無し、またはデータ化未完了, 200: データチェック中, 400: データチェック完了</summary>
        public int? DataCheckStatus { get; set; }
        /// <summary>0: データ化中、またはデータチェック中、またはデータチェック完了かつコンペア対象無し, 200: コンペア中, 400: コンペア完了</summary>
        public int? DataCompareStatus { get; set; }
        /// <summary>0: ページアップロード中(ページ分割中を含む), 200: データ化中, 400: データ化完了, 600: 一部データ化失敗</summary>
        public int? DataProcessingStatus { get; set; }
        /// <summary>The folderId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FolderId { get; set; }
#nullable restore
#else
        public string FolderId { get; set; }
#endif
        /// <summary>0: パーツ画像生成対象無し、1: パーツ画像生成中、2: パーツ画像生成完了、3: パーツ画像生成一部失敗、4: パーツ画像生成エラー</summary>
        public int? PartsImageCreationStatus { get; set; }
        /// <summary>2: データ化中, 13: データチェック中, 15: コンペア中, 16: コンペア完了, 22: CSVダウンロード済</summary>
        public int? Status { get; set; }
        /// <summary>The unitId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UnitId { get; set; }
#nullable restore
#else
        public string UnitId { get; set; }
#endif
        /// <summary>The unitName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UnitName { get; set; }
#nullable restore
#else
        public string UnitName { get; set; }
#endif
        /// <summary>The workflowId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WorkflowId { get; set; }
#nullable restore
#else
        public string WorkflowId { get; set; }
#endif
        /// <summary>The workflowName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WorkflowName { get; set; }
#nullable restore
#else
        public string WorkflowName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Unit"/> and sets the default values.
        /// </summary>
        public Unit()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Unit"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Unit CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Unit();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"createdAt", n => { CreatedAt = n.GetStringValue(); } },
                {"csvDownloadStatus", n => { CsvDownloadStatus = n.GetIntValue(); } },
                {"csvFileName", n => { CsvFileName = n.GetStringValue(); } },
                {"dataCheckStatus", n => { DataCheckStatus = n.GetIntValue(); } },
                {"dataCompareStatus", n => { DataCompareStatus = n.GetIntValue(); } },
                {"dataProcessingStatus", n => { DataProcessingStatus = n.GetIntValue(); } },
                {"folderId", n => { FolderId = n.GetStringValue(); } },
                {"partsImageCreationStatus", n => { PartsImageCreationStatus = n.GetIntValue(); } },
                {"status", n => { Status = n.GetIntValue(); } },
                {"unitId", n => { UnitId = n.GetStringValue(); } },
                {"unitName", n => { UnitName = n.GetStringValue(); } },
                {"workflowId", n => { WorkflowId = n.GetStringValue(); } },
                {"workflowName", n => { WorkflowName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("createdAt", CreatedAt);
            writer.WriteIntValue("csvDownloadStatus", CsvDownloadStatus);
            writer.WriteStringValue("csvFileName", CsvFileName);
            writer.WriteIntValue("dataCheckStatus", DataCheckStatus);
            writer.WriteIntValue("dataCompareStatus", DataCompareStatus);
            writer.WriteIntValue("dataProcessingStatus", DataProcessingStatus);
            writer.WriteStringValue("folderId", FolderId);
            writer.WriteIntValue("partsImageCreationStatus", PartsImageCreationStatus);
            writer.WriteIntValue("status", Status);
            writer.WriteStringValue("unitId", UnitId);
            writer.WriteStringValue("unitName", UnitName);
            writer.WriteStringValue("workflowId", WorkflowId);
            writer.WriteStringValue("workflowName", WorkflowName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
