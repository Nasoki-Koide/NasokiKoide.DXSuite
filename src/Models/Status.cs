// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace NasokiKoide.DXSuite.Models {
    #pragma warning disable CS1591
    public class Status : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>※仕分けされたページが無いか、OCRに送信していない仕分け先は0が設定されます。</summary>
        public int? ReadingUnitId { get; set; }
        /// <summary>The sendCountAll property</summary>
        public int? SendCountAll { get; set; }
        /// <summary>The sendCountFailure property</summary>
        public int? SendCountFailure { get; set; }
        /// <summary>The sendCountSuccess property</summary>
        public int? SendCountSuccess { get; set; }
        /// <summary>The statusCode property</summary>
        public int? StatusCode { get; set; }
        /// <summary>The statusName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatusName { get; set; }
#nullable restore
#else
        public string StatusName { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Status"/> and sets the default values.
        /// </summary>
        public Status()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Status"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Status CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Status();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"readingUnitId", n => { ReadingUnitId = n.GetIntValue(); } },
                {"sendCountAll", n => { SendCountAll = n.GetIntValue(); } },
                {"sendCountFailure", n => { SendCountFailure = n.GetIntValue(); } },
                {"sendCountSuccess", n => { SendCountSuccess = n.GetIntValue(); } },
                {"statusCode", n => { StatusCode = n.GetIntValue(); } },
                {"statusName", n => { StatusName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("readingUnitId", ReadingUnitId);
            writer.WriteIntValue("sendCountAll", SendCountAll);
            writer.WriteIntValue("sendCountFailure", SendCountFailure);
            writer.WriteIntValue("sendCountSuccess", SendCountSuccess);
            writer.WriteIntValue("statusCode", StatusCode);
            writer.WriteStringValue("statusName", StatusName);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
