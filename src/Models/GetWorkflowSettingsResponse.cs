// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace NasokiKoide.DXSuite.Models {
    #pragma warning disable CS1591
    public class GetWorkflowSettingsResponse : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>1: DX Suite (固定)</summary>
        public int? ApplicationType { get; set; }
        /// <summary>OCR種類が「非定型」の場合のみ返却されます。</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AtypicalModelName { get; set; }
#nullable restore
#else
        public string AtypicalModelName { get; set; }
#endif
        /// <summary>true : ON, false: OFF</summary>
        public bool? DataCheck { get; set; }
        /// <summary>true : ON, false: OFF</summary>
        public bool? DataProcessing { get; set; }
        /// <summary>1: 定形, 2: 非定型, 3: 全文OCR</summary>
        public int? OcrKindType { get; set; }
        /// <summary>1: Shift-JIS, 2: UTF-8</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OutputCharCode { get; set; }
#nullable restore
#else
        public string OutputCharCode { get; set; }
#endif
        /// <summary>The revision property</summary>
        public int? Revision { get; set; }
        /// <summary>The workflowId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WorkflowId { get; set; }
#nullable restore
#else
        public string WorkflowId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="GetWorkflowSettingsResponse"/> and sets the default values.
        /// </summary>
        public GetWorkflowSettingsResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="GetWorkflowSettingsResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static GetWorkflowSettingsResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new GetWorkflowSettingsResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"applicationType", n => { ApplicationType = n.GetIntValue(); } },
                {"atypicalModelName", n => { AtypicalModelName = n.GetStringValue(); } },
                {"dataCheck", n => { DataCheck = n.GetBoolValue(); } },
                {"dataProcessing", n => { DataProcessing = n.GetBoolValue(); } },
                {"ocrKindType", n => { OcrKindType = n.GetIntValue(); } },
                {"outputCharCode", n => { OutputCharCode = n.GetStringValue(); } },
                {"revision", n => { Revision = n.GetIntValue(); } },
                {"workflowId", n => { WorkflowId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("applicationType", ApplicationType);
            writer.WriteStringValue("atypicalModelName", AtypicalModelName);
            writer.WriteBoolValue("dataCheck", DataCheck);
            writer.WriteBoolValue("dataProcessing", DataProcessing);
            writer.WriteIntValue("ocrKindType", OcrKindType);
            writer.WriteStringValue("outputCharCode", OutputCharCode);
            writer.WriteIntValue("revision", Revision);
            writer.WriteStringValue("workflowId", WorkflowId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
