// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace NasokiKoide.DXSuite.Models {
    #pragma warning disable CS1591
    public class FullOcrGetOcrResultTable : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The bbox property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public FullOcrGetOcrResultTable_bbox? Bbox { get; set; }
#nullable restore
#else
        public FullOcrGetOcrResultTable_bbox Bbox { get; set; }
#endif
        /// <summary>The cells property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<FullOcrGetOcrResultTableCell>? Cells { get; set; }
#nullable restore
#else
        public List<FullOcrGetOcrResultTableCell> Cells { get; set; }
#endif
        /// <summary>The confidence property</summary>
        public float? Confidence { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="FullOcrGetOcrResultTable"/> and sets the default values.
        /// </summary>
        public FullOcrGetOcrResultTable()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="FullOcrGetOcrResultTable"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static FullOcrGetOcrResultTable CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new FullOcrGetOcrResultTable();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"bbox", n => { Bbox = n.GetObjectValue<FullOcrGetOcrResultTable_bbox>(FullOcrGetOcrResultTable_bbox.CreateFromDiscriminatorValue); } },
                {"cells", n => { Cells = n.GetCollectionOfObjectValues<FullOcrGetOcrResultTableCell>(FullOcrGetOcrResultTableCell.CreateFromDiscriminatorValue)?.ToList(); } },
                {"confidence", n => { Confidence = n.GetFloatValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<FullOcrGetOcrResultTable_bbox>("bbox", Bbox);
            writer.WriteCollectionOfObjectValues<FullOcrGetOcrResultTableCell>("cells", Cells);
            writer.WriteFloatValue("confidence", Confidence);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
