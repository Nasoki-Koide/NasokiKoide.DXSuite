// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace NasokiKoide.DXSuite.Models {
    #pragma warning disable CS1591
    public class Model__reading_parts__ReadingUnit : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>現在、項目尤度は提供されないため常に0がセットされる</summary>
        public int? Accuracy { get; set; }
        /// <summary>0: 情報なし（デフォルト）, 1: 低い精度で正確に読めている, 2: 少し低い精度で正確に読めている, 3: 少し高い精度で正確に読めている, 4: 高い精度で正確に読めている</summary>
        public int? AccuracyRank { get; set; }
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The columnName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ColumnName { get; set; }
#nullable restore
#else
        public string ColumnName { get; set; }
#endif
        /// <summary>0はCSVに出力しない。1がA列、2がB列…となる</summary>
        public int? ColumnNo { get; set; }
        /// <summary>The createdAt property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CreatedAt { get; set; }
#nullable restore
#else
        public string CreatedAt { get; set; }
#endif
        /// <summary>The docsetId property</summary>
        public int? DocsetId { get; set; }
        /// <summary>The documentId property</summary>
        public int? DocumentId { get; set; }
        /// <summary>The fileName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FileName { get; set; }
#nullable restore
#else
        public string FileName { get; set; }
#endif
        /// <summary>The height property</summary>
        public int? Height { get; set; }
        /// <summary>The id property</summary>
        public int? Id { get; set; }
        /// <summary>The readingPageId property</summary>
        public int? ReadingPageId { get; set; }
        /// <summary>The readingUnitId property</summary>
        public int? ReadingUnitId { get; set; }
        /// <summary>The result property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Result { get; set; }
#nullable restore
#else
        public string Result { get; set; }
#endif
        /// <summary>The status property</summary>
        public int? Status { get; set; }
        /// <summary>The width property</summary>
        public int? Width { get; set; }
        /// <summary>The x property</summary>
        public int? X { get; set; }
        /// <summary>The y property</summary>
        public int? Y { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="Model__reading_parts__ReadingUnit"/> and sets the default values.
        /// </summary>
        public Model__reading_parts__ReadingUnit()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Model__reading_parts__ReadingUnit"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Model__reading_parts__ReadingUnit CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Model__reading_parts__ReadingUnit();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"accuracy", n => { Accuracy = n.GetIntValue(); } },
                {"accuracyRank", n => { AccuracyRank = n.GetIntValue(); } },
                {"columnName", n => { ColumnName = n.GetStringValue(); } },
                {"columnNo", n => { ColumnNo = n.GetIntValue(); } },
                {"createdAt", n => { CreatedAt = n.GetStringValue(); } },
                {"docsetId", n => { DocsetId = n.GetIntValue(); } },
                {"documentId", n => { DocumentId = n.GetIntValue(); } },
                {"fileName", n => { FileName = n.GetStringValue(); } },
                {"height", n => { Height = n.GetIntValue(); } },
                {"id", n => { Id = n.GetIntValue(); } },
                {"readingPageId", n => { ReadingPageId = n.GetIntValue(); } },
                {"readingUnitId", n => { ReadingUnitId = n.GetIntValue(); } },
                {"result", n => { Result = n.GetStringValue(); } },
                {"status", n => { Status = n.GetIntValue(); } },
                {"width", n => { Width = n.GetIntValue(); } },
                {"x", n => { X = n.GetIntValue(); } },
                {"y", n => { Y = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("accuracy", Accuracy);
            writer.WriteIntValue("accuracyRank", AccuracyRank);
            writer.WriteStringValue("columnName", ColumnName);
            writer.WriteIntValue("columnNo", ColumnNo);
            writer.WriteStringValue("createdAt", CreatedAt);
            writer.WriteIntValue("docsetId", DocsetId);
            writer.WriteIntValue("documentId", DocumentId);
            writer.WriteStringValue("fileName", FileName);
            writer.WriteIntValue("height", Height);
            writer.WriteIntValue("id", Id);
            writer.WriteIntValue("readingPageId", ReadingPageId);
            writer.WriteIntValue("readingUnitId", ReadingUnitId);
            writer.WriteStringValue("result", Result);
            writer.WriteIntValue("status", Status);
            writer.WriteIntValue("width", Width);
            writer.WriteIntValue("x", X);
            writer.WriteIntValue("y", Y);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
