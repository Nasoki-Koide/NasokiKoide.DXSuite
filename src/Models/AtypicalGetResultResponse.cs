// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace NasokiKoide.DXSuite.Models {
    #pragma warning disable CS1591
    public class AtypicalGetResultResponse : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>ファイル単位の結果&lt;br&gt;処理中の場合はレスポンスされない。</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<AtypicalResultFile>? Files { get; set; }
#nullable restore
#else
        public List<AtypicalResultFile> Files { get; set; }
#endif
        /// <summary>処理状態&lt;br&gt;1: 処理中&lt;br&gt;2: 読取完了&lt;br&gt;3: 読取失敗&lt;br&gt;受け付けたファイルが全てファイル処理エラーの場合に読取エラーとなる。</summary>
        public int? Status { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="AtypicalGetResultResponse"/> and sets the default values.
        /// </summary>
        public AtypicalGetResultResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="AtypicalGetResultResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static AtypicalGetResultResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new AtypicalGetResultResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"files", n => { Files = n.GetCollectionOfObjectValues<AtypicalResultFile>(AtypicalResultFile.CreateFromDiscriminatorValue)?.ToList(); } },
                {"status", n => { Status = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<AtypicalResultFile>("files", Files);
            writer.WriteIntValue("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
