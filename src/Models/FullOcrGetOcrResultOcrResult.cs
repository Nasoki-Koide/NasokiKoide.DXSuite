// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace NasokiKoide.DXSuite.Models {
    #pragma warning disable CS1591
    public class FullOcrGetOcrResultOcrResult : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The bbox property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public FullOcrGetOcrResultOcrResult_bbox? Bbox { get; set; }
#nullable restore
#else
        public FullOcrGetOcrResultOcrResult_bbox Bbox { get; set; }
#endif
        /// <summary>characterExtraction が 1:ON の場合のみ</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<FullOcrGetOcrResultCharacter>? Characters { get; set; }
#nullable restore
#else
        public List<FullOcrGetOcrResultCharacter> Characters { get; set; }
#endif
        /// <summary>The text property</summary>
        public int? Text { get; set; }
        /// <summary>x+yの合計値順</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<FullOcrGetOcrResultVertice>? Vertices { get; set; }
#nullable restore
#else
        public List<FullOcrGetOcrResultVertice> Vertices { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="FullOcrGetOcrResultOcrResult"/> and sets the default values.
        /// </summary>
        public FullOcrGetOcrResultOcrResult()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="FullOcrGetOcrResultOcrResult"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static FullOcrGetOcrResultOcrResult CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new FullOcrGetOcrResultOcrResult();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"bbox", n => { Bbox = n.GetObjectValue<FullOcrGetOcrResultOcrResult_bbox>(FullOcrGetOcrResultOcrResult_bbox.CreateFromDiscriminatorValue); } },
                {"characters", n => { Characters = n.GetCollectionOfObjectValues<FullOcrGetOcrResultCharacter>(FullOcrGetOcrResultCharacter.CreateFromDiscriminatorValue)?.ToList(); } },
                {"text", n => { Text = n.GetIntValue(); } },
                {"vertices", n => { Vertices = n.GetCollectionOfObjectValues<FullOcrGetOcrResultVertice>(FullOcrGetOcrResultVertice.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<FullOcrGetOcrResultOcrResult_bbox>("bbox", Bbox);
            writer.WriteCollectionOfObjectValues<FullOcrGetOcrResultCharacter>("characters", Characters);
            writer.WriteIntValue("text", Text);
            writer.WriteCollectionOfObjectValues<FullOcrGetOcrResultVertice>("vertices", Vertices);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
