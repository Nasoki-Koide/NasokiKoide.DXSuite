// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace NasokiKoide.DXSuite.Models {
    #pragma warning disable CS1591
    public class AtypicalReception : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>読取クラス名をカンマ区切りで返却&lt;br&gt;※全件読取の場合はall_fieldsを返却&lt;br&gt;例) {“classes”: “title,issue_date,billing_company”}</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Classes { get; set; }
#nullable restore
#else
        public string Classes { get; set; }
#endif
        /// <summary>The departmentId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DepartmentId { get; set; }
#nullable restore
#else
        public string DepartmentId { get; set; }
#endif
        /// <summary>非定型モデル名&lt;br&gt;以下のいずれかが返却される&lt;br&gt;・invoice: 請求書&lt;br&gt;・receipt: 領収書・レシート&lt;br&gt;・purchase_order: 注文書&lt;br&gt;・resident_card: 住民票&lt;br&gt;・salary_r3: 給与支払報告書&lt;br&gt;・automobile_tax: 自動車税納付書&lt;br&gt;・medical_receipt: 医療費領収書&lt;br&gt;・lease_contract: 賃貸借契約書&lt;br&gt;・health_certificate: 健康診断書&lt;br&gt;・life_insurance: 生命保険証券&lt;br&gt;・resume: 履歴書&lt;br&gt;・payment: 納付書(納入通知書)&lt;br&gt;・thai_invoice: 請求書(タイ)&lt;br&gt;・idcard:本人確認書類</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Model { get; set; }
#nullable restore
#else
        public string Model { get; set; }
#endif
        /// <summary>受付日時&lt;br&gt;format: YYYY-MM-DDTHH:MM:SSZ&lt;br&gt;※ISO8601に準拠</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReceptionDateTime { get; set; }
#nullable restore
#else
        public string ReceptionDateTime { get; set; }
#endif
        /// <summary>The receptionId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ReceptionId { get; set; }
#nullable restore
#else
        public string ReceptionId { get; set; }
#endif
        /// <summary>読取処理状態&lt;br&gt;1: 処理中&lt;br&gt;2: 読取完了&lt;br&gt;3: 読取失敗&lt;br&gt;※受付ファイルが全てファイル処理エラーの場合に読取失敗となる</summary>
        public int? Status { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="AtypicalReception"/> and sets the default values.
        /// </summary>
        public AtypicalReception()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="AtypicalReception"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static AtypicalReception CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new AtypicalReception();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"classes", n => { Classes = n.GetStringValue(); } },
                {"departmentId", n => { DepartmentId = n.GetStringValue(); } },
                {"model", n => { Model = n.GetStringValue(); } },
                {"receptionDateTime", n => { ReceptionDateTime = n.GetStringValue(); } },
                {"receptionId", n => { ReceptionId = n.GetStringValue(); } },
                {"status", n => { Status = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("classes", Classes);
            writer.WriteStringValue("departmentId", DepartmentId);
            writer.WriteStringValue("model", Model);
            writer.WriteStringValue("receptionDateTime", ReceptionDateTime);
            writer.WriteStringValue("receptionId", ReceptionId);
            writer.WriteIntValue("status", Status);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
