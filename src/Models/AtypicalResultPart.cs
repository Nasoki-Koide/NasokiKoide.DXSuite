// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace NasokiKoide.DXSuite.Models {
    #pragma warning disable CS1591
    public class AtypicalResultPart : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The bbox property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AtypicalResultPart_bbox? Bbox { get; set; }
#nullable restore
#else
        public AtypicalResultPart_bbox Bbox { get; set; }
#endif
        /// <summary>The className property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClassName { get; set; }
#nullable restore
#else
        public string ClassName { get; set; }
#endif
        /// <summary>自信度&lt;br&gt;利用モデルにより値が設定されます。&lt;br&gt;※請求書モデル（明細項目は非対応のため0を返却）・健康診断書モデルのみに対応&lt;br&gt;※対応外のモデルの場合は0を返却</summary>
        public float? ConfidenceScore { get; set; }
        /// <summary>The detectionConfidence property</summary>
        public float? DetectionConfidence { get; set; }
        /// <summary>OCR尤度&lt;br&gt;利用モデルにより値が設定されます。&lt;br&gt;※請求書モデル・健康診断書モデルのみに対応&lt;br&gt;※対応外のモデルの場合は0を返却&lt;br&gt;</summary>
        public float? OcrConfidence { get; set; }
        /// <summary>1: 読取成功&lt;br&gt;2: 検出&lt;br&gt;3: 未検出&lt;br&gt;4: 読取失敗</summary>
        public int? Status { get; set; }
        /// <summary>タグ情報 &lt;br&gt;下記が配列で設定されます。&lt;br&gt;※ ○には数字が入ります。&lt;br&gt;・account/○ : 口座情報のクラスに設定。&lt;br&gt;・invoice_table/○ : 請求書のテーブルのクラスに設定。&lt;br&gt;・purchase_order_table/○ : 注文書のテーブルのクラスに設定。&lt;br&gt;・contract_table/○ : 契約内容(納付書)のテーブルのクラスに設定。&lt;br&gt;・table_history/○ : 学歴・職歴(履歴書)のテーブルのクラスに設定。&lt;br&gt;・table_qualification/○ : 資格・免許(履歴書)のテーブルのクラスに設定。&lt;br&gt;・header : テーブルのクラスのヘッダーに設定。同時に必ず row/1 が設定される。&lt;br&gt;・row/○ : テーブルのクラスに設定。○の数字はテーブルの行数を表す。&lt;br&gt;・column/○ : テーブルのクラスに設定。○の数字はテーブルの列数を表す。&lt;br&gt;・クラス名: className からテーブル名を除いた名前。&lt;br&gt;・multiple : 1クラスにつき複数箇所読取りする場合に設定。</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Tags { get; set; }
#nullable restore
#else
        public UntypedNode Tags { get; set; }
#endif
        /// <summary>The text property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Text { get; set; }
#nullable restore
#else
        public string Text { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="AtypicalResultPart"/> and sets the default values.
        /// </summary>
        public AtypicalResultPart()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="AtypicalResultPart"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static AtypicalResultPart CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new AtypicalResultPart();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"bbox", n => { Bbox = n.GetObjectValue<AtypicalResultPart_bbox>(AtypicalResultPart_bbox.CreateFromDiscriminatorValue); } },
                {"className", n => { ClassName = n.GetStringValue(); } },
                {"confidenceScore", n => { ConfidenceScore = n.GetFloatValue(); } },
                {"detectionConfidence", n => { DetectionConfidence = n.GetFloatValue(); } },
                {"ocrConfidence", n => { OcrConfidence = n.GetFloatValue(); } },
                {"status", n => { Status = n.GetIntValue(); } },
                {"tags", n => { Tags = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                {"text", n => { Text = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<AtypicalResultPart_bbox>("bbox", Bbox);
            writer.WriteStringValue("className", ClassName);
            writer.WriteFloatValue("confidenceScore", ConfidenceScore);
            writer.WriteFloatValue("detectionConfidence", DetectionConfidence);
            writer.WriteFloatValue("ocrConfidence", OcrConfidence);
            writer.WriteIntValue("status", Status);
            writer.WriteObjectValue<UntypedNode>("tags", Tags);
            writer.WriteStringValue("text", Text);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
