// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace NasokiKoide.DXSuite.Models {
    #pragma warning disable CS1591
    public class GetReadingUnitsIdsResponse : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The limit property</summary>
        public int? Limit { get; set; }
        /// <summary>The offset property</summary>
        public int? Offset { get; set; }
        /// <summary>The totalCount property</summary>
        public int? TotalCount { get; set; }
        /// <summary>The unitIds property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? UnitIds { get; set; }
#nullable restore
#else
        public List<string> UnitIds { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="GetReadingUnitsIdsResponse"/> and sets the default values.
        /// </summary>
        public GetReadingUnitsIdsResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="GetReadingUnitsIdsResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static GetReadingUnitsIdsResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new GetReadingUnitsIdsResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"limit", n => { Limit = n.GetIntValue(); } },
                {"offset", n => { Offset = n.GetIntValue(); } },
                {"totalCount", n => { TotalCount = n.GetIntValue(); } },
                {"unitIds", n => { UnitIds = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("limit", Limit);
            writer.WriteIntValue("offset", Offset);
            writer.WriteIntValue("totalCount", TotalCount);
            writer.WriteCollectionOfPrimitiveValues<string>("unitIds", UnitIds);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
