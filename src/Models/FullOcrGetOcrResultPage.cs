// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace NasokiKoide.DXSuite.Models {
    #pragma warning disable CS1591
    public class FullOcrGetOcrResultPage : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The fullText property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FullText { get; set; }
#nullable restore
#else
        public string FullText { get; set; }
#endif
        /// <summary>The ocrResults property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<FullOcrGetOcrResultOcrResult>? OcrResults { get; set; }
#nullable restore
#else
        public List<FullOcrGetOcrResultOcrResult> OcrResults { get; set; }
#endif
        /// <summary>The ocrSuccess property</summary>
        public bool? OcrSuccess { get; set; }
        /// <summary>The pageNum property</summary>
        public int? PageNum { get; set; }
        /// <summary>The tables property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<FullOcrGetOcrResultTable>? Tables { get; set; }
#nullable restore
#else
        public List<FullOcrGetOcrResultTable> Tables { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="FullOcrGetOcrResultPage"/> and sets the default values.
        /// </summary>
        public FullOcrGetOcrResultPage()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="FullOcrGetOcrResultPage"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static FullOcrGetOcrResultPage CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new FullOcrGetOcrResultPage();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"fullText", n => { FullText = n.GetStringValue(); } },
                {"ocrResults", n => { OcrResults = n.GetCollectionOfObjectValues<FullOcrGetOcrResultOcrResult>(FullOcrGetOcrResultOcrResult.CreateFromDiscriminatorValue)?.ToList(); } },
                {"ocrSuccess", n => { OcrSuccess = n.GetBoolValue(); } },
                {"pageNum", n => { PageNum = n.GetIntValue(); } },
                {"tables", n => { Tables = n.GetCollectionOfObjectValues<FullOcrGetOcrResultTable>(FullOcrGetOcrResultTable.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("fullText", FullText);
            writer.WriteCollectionOfObjectValues<FullOcrGetOcrResultOcrResult>("ocrResults", OcrResults);
            writer.WriteBoolValue("ocrSuccess", OcrSuccess);
            writer.WriteIntValue("pageNum", PageNum);
            writer.WriteCollectionOfObjectValues<FullOcrGetOcrResultTable>("tables", Tables);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
